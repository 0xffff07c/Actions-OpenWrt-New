name: Build OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  REPO_URL: https://git.openwrt.org/openwrt/openwrt.git
  REPO_BRANCH: master
  DIY_FEEDS_SH: diy-feeds.sh
  DIY_PACKAGES_SH: diy-packages.sh
  DIY_CONFIG_SH: diy-config.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(cat depends-ubuntu)
        sudo timedatectl set-timezone "$TZ"

    - name: Clone source code
      run: |
        df -hT $PWD
        git clone --branch $REPO_BRANCH $REPO_URL
      
    - name: Select a specific code revision
      run: cd openwrt && git checkout $(git tag --sort=-creatordate | head -n1)

    - name: Load custom feeds
      run: |
        chmod +x $DIY_FEEDS_SH
        cd openwrt && $GITHUB_WORKSPACE/$DIY_FEEDS_SH

    - name: Update&Install feeds
      run: |
        cd openwrt && ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Load custom packages
      run: |
        chmod +x $DIY_PACKAGES_SH
        $GITHUB_WORKSPACE/$DIY_PACKAGES_SH

    - name: Load custom configuration
      run: |
        chmod +x $DIY_CONFIG_SH
        cd openwrt
        wget https://downloads.openwrt.org/releases/$(git tag --sort=-creatordate | head -n1 | cut -c2-)/targets/x86/64/config.buildinfo -O .config        
        $GITHUB_WORKSPACE/$DIY_CONFIG_SH
        make defconfig

    - name: Start SSH via tmate
      uses: rdp-studio/ssh2actions@main
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
         
    - name: Download package
      id: package
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make download -j$(nproc) || make download -j1 V=s        

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "FIRMWARE_VERSION=_$(git describe --tags --abbrev=0 --exact-match)" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FIRMWARE_VERSION }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FIRMWARE_VERSION }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(cd openwrt && git describe --tags --abbrev=0 --exact-match)" >> $GITHUB_OUTPUT
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}${{ env.FILE_DATE }}
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
